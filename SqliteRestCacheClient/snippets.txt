DEMO: Setting up the SQLite DB
------------------------------
Install-Package sqlite-net-pcl
Install-Package SQLitePCLRaw.bundle_green


Constants
public static string DatabaseFilename = "ShopSQLite.db3";

public static SQLite.SQLiteOpenFlags Flags =
    // open the database in read/write mode
    SQLite.SQLiteOpenFlags.ReadWrite |
    // create the database if it doesn't exist
    SQLite.SQLiteOpenFlags.Create |
    // enable multi-threaded database access
    SQLite.SQLiteOpenFlags.SharedCache;

public static string DatabasePath =>
    Path.Combine(FileSystem.AppDataDirectory, DatabaseFilename);


BethanysPieShopDatabase

SQLiteAsyncConnection? _database;

public BethanysPieShopDatabase()
{
}

public async Task Init()
{
    if (_database is not null)
        return;

    _database = new SQLiteAsyncConnection(Constants.DatabasePath, Constants.Flags);
}


[Table("ShoppingCartItems")]
public class ShoppingCartItem 
{
    [PrimaryKey]
    [AutoIncrement]
    public int ItemId { get; set; }

    public long? CartId { get; set; }

    public ActionTypeEnum ActionId { get; set; }
    public string? ImageThumbnailUrl { get; set; }
    public int Id { get; set; }
    public string? Name { get; set; }
    public int PieId { get; set; }
    public int Quantity { get; set; }
    public decimal Price { get; set; }
}

public enum ActionTypeEnum
{
    None,
    Added,
    Updated,
    Deleted
}


Demo: Creating the database and CRUD operations
-----------------------------------------------
using BethanysPieShop.Mobile.Helpers;
using BethanysPieShop.Mobile.Models;
using SQLite;

namespace BethanysPieShop.Mobile.Data;

public class BethanysPieShopDatabase
{
    SQLiteAsyncConnection? _database;

    public BethanysPieShopDatabase()
    {
    }

    public async Task Init()
    {
        if (_database is not null)
            return;

        _database = new SQLiteAsyncConnection(Constants.DatabasePath, Constants.Flags);

        await _database.CreateTableAsync<ShoppingCartItem>();
    }

    public async Task<ShoppingCartItem?> GetLastShoppingCartItem()
    {
        await Init();

        var item = await _database!.Table<ShoppingCartItem>()
            .OrderByDescending(i => i.ItemId)
            .FirstOrDefaultAsync();
        return item;
    }

    public async Task AddItem(ShoppingCartItemModel shoppingCartItem, long cartId)
    {
        await Init();

        var itemDB = await _database!.Table<ShoppingCartItem>()
            .FirstOrDefaultAsync(i => i.PieId == shoppingCartItem.PieId);


        if (itemDB == null)
        {
            ShoppingCartItem item = new ShoppingCartItem
            {
                CartId = cartId,
                ImageThumbnailUrl = shoppingCartItem.Pie.ImageThumbnailUrl,
                Id = shoppingCartItem.Id,
                Name = shoppingCartItem.Pie.Name,
                PieId = shoppingCartItem.Pie.Id,
                Price = shoppingCartItem.Pie.Price,
                Quantity = shoppingCartItem.Quantity,
            };

            await _database!.InsertAsync(item);
        }
        else
        {
            await UpdateItem(shoppingCartItem);
        }
    }

    public async Task ClearShoppingCart()
    {
        await Init();

        var items = await _database!.Table<ShoppingCartItem>()
            .ToListAsync();

        foreach (var item in items)
        {
            await _database.DeleteAsync(item);
        }
    }

    public async Task DeleteItem(int id)
    {
        await Init();
        var item = await _database!.Table<ShoppingCartItem>()
            .FirstOrDefaultAsync(i => i.Id == id);

        if (item is not null)
        {
            await _database.DeleteAsync(item);
        }
    }

    public async Task UpdateItem(ShoppingCartItemModel shoppingCartItem)
    {
        await Init();

        var itemDB = await _database!.Table<ShoppingCartItem>()
            .FirstOrDefaultAsync(i => i.PieId == shoppingCartItem.PieId);

        if (itemDB is not null)
        {
            var item = CloneShoppingCartItem(itemDB);

            item.Id = shoppingCartItem.Id;
            item.Quantity = shoppingCartItem.Quantity;

            await _database.UpdateAsync(item);
        }
    }

    private static ShoppingCartItem CloneShoppingCartItem(ShoppingCartItem item)
    {
        ShoppingCartItem updatedItem = new ShoppingCartItem
        {
            Id = item.Id,
            CartId = item.CartId,
            ImageThumbnailUrl = item.ImageThumbnailUrl,
            ItemId = item.ItemId,
            Name = item.Name,
            PieId = item.PieId,
            Price = item.Price,
            Quantity = item.Quantity,
        };
        return updatedItem;
    }
}


using System.Text;
using BethanysPieShop.Mobile.Models;
using BethanysPieShop.Mobile.Repositories.Interfaces;
using System.Text.Json;
using System.Net.Http.Json;
using BethanysPieShop.Mobile.Data;

namespace BethanysPieShop.Mobile.Repositories;

public class ShoppingCartRepository : Repository, IShoppingCartRepository
{
    private readonly IAuthRepository _authRepository;
    private long? CartId { get; set; }
    private readonly BethanysPieShopDatabase _database;

    public ShoppingCartRepository(
        IHttpClientFactory httpClientFactory,
        IAuthRepository authRepository,
        BethanysPieShopDatabase database)
        : base(httpClientFactory)
    {
        _authRepository = authRepository;
        _database = database;
    }

    public async Task AddItem(ShoppingCartItemModel shoppingCartItem)
    {
        HttpClient client = CreateHttpClient();

        if (CartId is null)
        {
            await CreateShoppingCart();
        }

        var content = new StringContent(JsonSerializer.Serialize(shoppingCartItem), Encoding.UTF8,
            "application/json");

        var response = await client.PostAsync(
            $"api/shoppingCart/{CartId}/add",
            content);

        response.EnsureSuccessStatusCode();

        await _database.AddItem(shoppingCartItem, CartId!.Value);
    }

    public async Task ClearShoppingCart()
    {
        var client = CreateHttpClient();

        var response = await client.DeleteAsync(
            $"api/shoppingCart/{CartId}/all");

        response.EnsureSuccessStatusCode();

        await _database.ClearShoppingCart();
    }

    public async Task Delete(int id)
    {
        HttpClient client = CreateHttpClient();

        var response = await client.DeleteAsync(
            $"api/shoppingCart/{CartId}/item/{id}");

        response.EnsureSuccessStatusCode();

        await _database.DeleteItem(id);
    }

    public async Task<ShoppingCartModel> GetShoppingCart()
    {
        if (CartId is null)
        {
            var item = await _database.GetLastShoppingCartItem();
            CartId = item?.CartId;

            if (CartId is null)
            {
                await CreateShoppingCart();
            }
        }

        var authToken = _authRepository.GetAuthorizationToken();
        var client = CreateHttpClient(authToken);

        ShoppingCartModel? shoppingCart = await client.GetFromJsonAsync<ShoppingCartModel>(
            $"api/shoppingCart/{CartId}");

        return shoppingCart ?? new ShoppingCartModel();
    }

    public async Task UpdateItem(ShoppingCartItemModel shoppingCartItem)
    {
        var client = CreateHttpClient();

        ArgumentNullException.ThrowIfNull(CartId);

        var content = new StringContent(JsonSerializer.Serialize(shoppingCartItem), Encoding.UTF8,
            "application/json");

        var response = await client.PatchAsync(
           $"api/shoppingCart/{CartId}/item/{shoppingCartItem.Id}",
           content);

        response.EnsureSuccessStatusCode();

        await _database.UpdateItem(shoppingCartItem);
    }

    private async Task CreateShoppingCart()
    {
        var client = CreateHttpClient();

        var item = await _database.GetLastShoppingCartItem();
        CartId = item?.CartId;

        if (CartId is null)
        {
            var response = await client.PostAsync(
                $"api/shoppingCart", null);

            response.EnsureSuccessStatusCode();

            CartId = await response.Content.ReadFromJsonAsync<long>();
        }
    }
}


